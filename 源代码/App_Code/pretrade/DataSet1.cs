//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WebApplication1 {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private driverDataTable tabledriver;
        
        private pretradeDataTable tablepretrade;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["driver"] != null)) {
                    this.Tables.Add(new driverDataTable(ds.Tables["driver"]));
                }
                if ((ds.Tables["pretrade"] != null)) {
                    this.Tables.Add(new pretradeDataTable(ds.Tables["pretrade"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public driverDataTable driver {
            get {
                return this.tabledriver;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pretradeDataTable pretrade {
            get {
                return this.tablepretrade;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["driver"] != null)) {
                this.Tables.Add(new driverDataTable(ds.Tables["driver"]));
            }
            if ((ds.Tables["pretrade"] != null)) {
                this.Tables.Add(new pretradeDataTable(ds.Tables["pretrade"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        public void InitVars() {
            this.tabledriver = ((driverDataTable)(this.Tables["driver"]));
            if ((this.tabledriver != null)) {
                this.tabledriver.InitVars();
            }
            this.tablepretrade = ((pretradeDataTable)(this.Tables["pretrade"]));
            if ((this.tablepretrade != null)) {
                this.tablepretrade.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabledriver = new driverDataTable();
            this.Tables.Add(this.tabledriver);
            this.tablepretrade = new pretradeDataTable();
            this.Tables.Add(this.tablepretrade);
        }
        
        private bool ShouldSerializedriver() {
            return false;
        }
        
        private bool ShouldSerializepretrade() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void driverRowChangeEventHandler(object sender, driverRowChangeEvent e);
        
        public delegate void pretradeRowChangeEventHandler(object sender, pretradeRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class driverDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columndriverid;
            
            private DataColumn columnname_driver;
            
            private DataColumn columnemploytime_driver;
            
            private DataColumn columndrivetimes_driver;
            
            private DataColumn columnaccidenttimes_driver;
            
            private DataColumn columncardtype_driver;
            
            private DataColumn columnidcard_driver;
            
            private DataColumn columnmobilephone_driver;
            
            private DataColumn columnaddress_driver;
            
            private DataColumn columnpostcode_driver;
            
            public driverDataTable() : 
                    base("driver") {
                this.InitClass();
            }
            
            public driverDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn driveridColumn {
                get {
                    return this.columndriverid;
                }
            }
            
            public DataColumn name_driverColumn {
                get {
                    return this.columnname_driver;
                }
            }
            
            public DataColumn employtime_driverColumn {
                get {
                    return this.columnemploytime_driver;
                }
            }
            
            public DataColumn drivetimes_driverColumn {
                get {
                    return this.columndrivetimes_driver;
                }
            }
            
            public DataColumn accidenttimes_driverColumn {
                get {
                    return this.columnaccidenttimes_driver;
                }
            }
            
            public DataColumn cardtype_driverColumn {
                get {
                    return this.columncardtype_driver;
                }
            }
            
            public DataColumn idcard_driverColumn {
                get {
                    return this.columnidcard_driver;
                }
            }
            
            public DataColumn mobilephone_driverColumn {
                get {
                    return this.columnmobilephone_driver;
                }
            }
            
            public DataColumn address_driverColumn {
                get {
                    return this.columnaddress_driver;
                }
            }
            
            public DataColumn postcode_driverColumn {
                get {
                    return this.columnpostcode_driver;
                }
            }
            
            public driverRow this[int index] {
                get {
                    return ((driverRow)(this.Rows[index]));
                }
            }
            
            public event driverRowChangeEventHandler driverRowChanged;
            
            public event driverRowChangeEventHandler driverRowChanging;
            
            public event driverRowChangeEventHandler driverRowDeleted;
            
            public event driverRowChangeEventHandler driverRowDeleting;
            
            public void AdddriverRow(driverRow row) {
                this.Rows.Add(row);
            }
            
            public driverRow AdddriverRow(string driverid, string name_driver, System.DateTime employtime_driver, int drivetimes_driver, int accidenttimes_driver, string cardtype_driver, string idcard_driver, string mobilephone_driver, string address_driver, string postcode_driver) {
                driverRow rowdriverRow = ((driverRow)(this.NewRow()));
                rowdriverRow.ItemArray = new object[] {
                        driverid,
                        name_driver,
                        employtime_driver,
                        drivetimes_driver,
                        accidenttimes_driver,
                        cardtype_driver,
                        idcard_driver,
                        mobilephone_driver,
                        address_driver,
                        postcode_driver};
                this.Rows.Add(rowdriverRow);
                return rowdriverRow;
            }
            
            public driverRow FindBydriverid(string driverid) {
                return ((driverRow)(this.Rows.Find(new object[] {
                            driverid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                driverDataTable cln = ((driverDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new driverDataTable();
            }
            
            public void InitVars() {
                this.columndriverid = this.Columns["driverid"];
                this.columnname_driver = this.Columns["name_driver"];
                this.columnemploytime_driver = this.Columns["employtime_driver"];
                this.columndrivetimes_driver = this.Columns["drivetimes_driver"];
                this.columnaccidenttimes_driver = this.Columns["accidenttimes_driver"];
                this.columncardtype_driver = this.Columns["cardtype_driver"];
                this.columnidcard_driver = this.Columns["idcard_driver"];
                this.columnmobilephone_driver = this.Columns["mobilephone_driver"];
                this.columnaddress_driver = this.Columns["address_driver"];
                this.columnpostcode_driver = this.Columns["postcode_driver"];
            }
            
            private void InitClass() {
                this.columndriverid = new DataColumn("driverid", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndriverid);
                this.columnname_driver = new DataColumn("name_driver", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname_driver);
                this.columnemploytime_driver = new DataColumn("employtime_driver", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnemploytime_driver);
                this.columndrivetimes_driver = new DataColumn("drivetimes_driver", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndrivetimes_driver);
                this.columnaccidenttimes_driver = new DataColumn("accidenttimes_driver", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaccidenttimes_driver);
                this.columncardtype_driver = new DataColumn("cardtype_driver", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncardtype_driver);
                this.columnidcard_driver = new DataColumn("idcard_driver", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcard_driver);
                this.columnmobilephone_driver = new DataColumn("mobilephone_driver", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmobilephone_driver);
                this.columnaddress_driver = new DataColumn("address_driver", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaddress_driver);
                this.columnpostcode_driver = new DataColumn("postcode_driver", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpostcode_driver);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columndriverid}, true));
                this.columndriverid.AllowDBNull = false;
                this.columndriverid.Unique = true;
            }
            
            public driverRow NewdriverRow() {
                return ((driverRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new driverRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(driverRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.driverRowChanged != null)) {
                    this.driverRowChanged(this, new driverRowChangeEvent(((driverRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.driverRowChanging != null)) {
                    this.driverRowChanging(this, new driverRowChangeEvent(((driverRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.driverRowDeleted != null)) {
                    this.driverRowDeleted(this, new driverRowChangeEvent(((driverRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.driverRowDeleting != null)) {
                    this.driverRowDeleting(this, new driverRowChangeEvent(((driverRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedriverRow(driverRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class driverRow : DataRow {
            
            private driverDataTable tabledriver;
            
            public driverRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledriver = ((driverDataTable)(this.Table));
            }
            
            public string driverid {
                get {
                    return ((string)(this[this.tabledriver.driveridColumn]));
                }
                set {
                    this[this.tabledriver.driveridColumn] = value;
                }
            }
            
            public string name_driver {
                get {
                    try {
                        return ((string)(this[this.tabledriver.name_driverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledriver.name_driverColumn] = value;
                }
            }
            
            public System.DateTime employtime_driver {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledriver.employtime_driverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledriver.employtime_driverColumn] = value;
                }
            }
            
            public int drivetimes_driver {
                get {
                    try {
                        return ((int)(this[this.tabledriver.drivetimes_driverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledriver.drivetimes_driverColumn] = value;
                }
            }
            
            public int accidenttimes_driver {
                get {
                    try {
                        return ((int)(this[this.tabledriver.accidenttimes_driverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledriver.accidenttimes_driverColumn] = value;
                }
            }
            
            public string cardtype_driver {
                get {
                    try {
                        return ((string)(this[this.tabledriver.cardtype_driverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledriver.cardtype_driverColumn] = value;
                }
            }
            
            public string idcard_driver {
                get {
                    try {
                        return ((string)(this[this.tabledriver.idcard_driverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledriver.idcard_driverColumn] = value;
                }
            }
            
            public string mobilephone_driver {
                get {
                    try {
                        return ((string)(this[this.tabledriver.mobilephone_driverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledriver.mobilephone_driverColumn] = value;
                }
            }
            
            public string address_driver {
                get {
                    try {
                        return ((string)(this[this.tabledriver.address_driverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledriver.address_driverColumn] = value;
                }
            }
            
            public string postcode_driver {
                get {
                    try {
                        return ((string)(this[this.tabledriver.postcode_driverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledriver.postcode_driverColumn] = value;
                }
            }
            
            public bool Isname_driverNull() {
                return this.IsNull(this.tabledriver.name_driverColumn);
            }
            
            public void Setname_driverNull() {
                this[this.tabledriver.name_driverColumn] = System.Convert.DBNull;
            }
            
            public bool Isemploytime_driverNull() {
                return this.IsNull(this.tabledriver.employtime_driverColumn);
            }
            
            public void Setemploytime_driverNull() {
                this[this.tabledriver.employtime_driverColumn] = System.Convert.DBNull;
            }
            
            public bool Isdrivetimes_driverNull() {
                return this.IsNull(this.tabledriver.drivetimes_driverColumn);
            }
            
            public void Setdrivetimes_driverNull() {
                this[this.tabledriver.drivetimes_driverColumn] = System.Convert.DBNull;
            }
            
            public bool Isaccidenttimes_driverNull() {
                return this.IsNull(this.tabledriver.accidenttimes_driverColumn);
            }
            
            public void Setaccidenttimes_driverNull() {
                this[this.tabledriver.accidenttimes_driverColumn] = System.Convert.DBNull;
            }
            
            public bool Iscardtype_driverNull() {
                return this.IsNull(this.tabledriver.cardtype_driverColumn);
            }
            
            public void Setcardtype_driverNull() {
                this[this.tabledriver.cardtype_driverColumn] = System.Convert.DBNull;
            }
            
            public bool Isidcard_driverNull() {
                return this.IsNull(this.tabledriver.idcard_driverColumn);
            }
            
            public void Setidcard_driverNull() {
                this[this.tabledriver.idcard_driverColumn] = System.Convert.DBNull;
            }
            
            public bool Ismobilephone_driverNull() {
                return this.IsNull(this.tabledriver.mobilephone_driverColumn);
            }
            
            public void Setmobilephone_driverNull() {
                this[this.tabledriver.mobilephone_driverColumn] = System.Convert.DBNull;
            }
            
            public bool Isaddress_driverNull() {
                return this.IsNull(this.tabledriver.address_driverColumn);
            }
            
            public void Setaddress_driverNull() {
                this[this.tabledriver.address_driverColumn] = System.Convert.DBNull;
            }
            
            public bool Ispostcode_driverNull() {
                return this.IsNull(this.tabledriver.postcode_driverColumn);
            }
            
            public void Setpostcode_driverNull() {
                this[this.tabledriver.postcode_driverColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class driverRowChangeEvent : EventArgs {
            
            private driverRow eventRow;
            
            private DataRowAction eventAction;
            
            public driverRowChangeEvent(driverRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public driverRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pretradeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid_pretrade;
            
            private DataColumn columnuserid;
            
            private DataColumn columnusername_pretrade;
            
            private DataColumn columncarname_pretrade;
            
            private DataColumn columncarid;
            
            private DataColumn columncarmodel_pretrade;
            
            private DataColumn columnbegintime_pretrade;
            
            private DataColumn columnendtime_pretrade;
            
            private DataColumn columndeposit_pretrade;
            
            private DataColumn columnnote_pretrade;
            
            private DataColumn columnrcdtime_pretrade;
            
            private DataColumn columndriver_pretrade;
            
            private DataColumn columndriverid;
            
            private DataColumn columnenable_pretrade;
            
            private DataColumn columnoperid;
            
            private DataColumn columnopername_pretrade;
            
            private DataColumn columnmembertype_pretrade;
            
            public pretradeDataTable() : 
                    base("pretrade") {
                this.InitClass();
            }
            
            public pretradeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn id_pretradeColumn {
                get {
                    return this.columnid_pretrade;
                }
            }
            
            public DataColumn useridColumn {
                get {
                    return this.columnuserid;
                }
            }
            
            public DataColumn username_pretradeColumn {
                get {
                    return this.columnusername_pretrade;
                }
            }
            
            public DataColumn carname_pretradeColumn {
                get {
                    return this.columncarname_pretrade;
                }
            }
            
            public DataColumn caridColumn {
                get {
                    return this.columncarid;
                }
            }
            
            public DataColumn carmodel_pretradeColumn {
                get {
                    return this.columncarmodel_pretrade;
                }
            }
            
            public DataColumn begintime_pretradeColumn {
                get {
                    return this.columnbegintime_pretrade;
                }
            }
            
            public DataColumn endtime_pretradeColumn {
                get {
                    return this.columnendtime_pretrade;
                }
            }
            
            public DataColumn deposit_pretradeColumn {
                get {
                    return this.columndeposit_pretrade;
                }
            }
            
            public DataColumn note_pretradeColumn {
                get {
                    return this.columnnote_pretrade;
                }
            }
            
            public DataColumn rcdtime_pretradeColumn {
                get {
                    return this.columnrcdtime_pretrade;
                }
            }
            
            public DataColumn driver_pretradeColumn {
                get {
                    return this.columndriver_pretrade;
                }
            }
            
            public DataColumn driveridColumn {
                get {
                    return this.columndriverid;
                }
            }
            
            public DataColumn enable_pretradeColumn {
                get {
                    return this.columnenable_pretrade;
                }
            }
            
            public DataColumn operidColumn {
                get {
                    return this.columnoperid;
                }
            }
            
            public DataColumn opername_pretradeColumn {
                get {
                    return this.columnopername_pretrade;
                }
            }
            
            public DataColumn membertype_pretradeColumn {
                get {
                    return this.columnmembertype_pretrade;
                }
            }
            
            public pretradeRow this[int index] {
                get {
                    return ((pretradeRow)(this.Rows[index]));
                }
            }
            
            public event pretradeRowChangeEventHandler pretradeRowChanged;
            
            public event pretradeRowChangeEventHandler pretradeRowChanging;
            
            public event pretradeRowChangeEventHandler pretradeRowDeleted;
            
            public event pretradeRowChangeEventHandler pretradeRowDeleting;
            
            public void AddpretradeRow(pretradeRow row) {
                this.Rows.Add(row);
            }
            
            public pretradeRow AddpretradeRow(
                        int id_pretrade, 
                        string userid, 
                        string username_pretrade, 
                        string carname_pretrade, 
                        string carid, 
                        string carmodel_pretrade, 
                        System.DateTime begintime_pretrade, 
                        System.DateTime endtime_pretrade, 
                        System.Decimal deposit_pretrade, 
                        string note_pretrade, 
                        System.DateTime rcdtime_pretrade, 
                        string driver_pretrade, 
                        string driverid, 
                        System.Byte[] enable_pretrade, 
                        string operid, 
                        string opername_pretrade, 
                        string membertype_pretrade) {
                pretradeRow rowpretradeRow = ((pretradeRow)(this.NewRow()));
                rowpretradeRow.ItemArray = new object[] {
                        id_pretrade,
                        userid,
                        username_pretrade,
                        carname_pretrade,
                        carid,
                        carmodel_pretrade,
                        begintime_pretrade,
                        endtime_pretrade,
                        deposit_pretrade,
                        note_pretrade,
                        rcdtime_pretrade,
                        driver_pretrade,
                        driverid,
                        enable_pretrade,
                        operid,
                        opername_pretrade,
                        membertype_pretrade};
                this.Rows.Add(rowpretradeRow);
                return rowpretradeRow;
            }
            
            public pretradeRow FindByid_pretrade(int id_pretrade) {
                return ((pretradeRow)(this.Rows.Find(new object[] {
                            id_pretrade})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                pretradeDataTable cln = ((pretradeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new pretradeDataTable();
            }
            
            public void InitVars() {
                this.columnid_pretrade = this.Columns["id_pretrade"];
                this.columnuserid = this.Columns["userid"];
                this.columnusername_pretrade = this.Columns["username_pretrade"];
                this.columncarname_pretrade = this.Columns["carname_pretrade"];
                this.columncarid = this.Columns["carid"];
                this.columncarmodel_pretrade = this.Columns["carmodel_pretrade"];
                this.columnbegintime_pretrade = this.Columns["begintime_pretrade"];
                this.columnendtime_pretrade = this.Columns["endtime_pretrade"];
                this.columndeposit_pretrade = this.Columns["deposit_pretrade"];
                this.columnnote_pretrade = this.Columns["note_pretrade"];
                this.columnrcdtime_pretrade = this.Columns["rcdtime_pretrade"];
                this.columndriver_pretrade = this.Columns["driver_pretrade"];
                this.columndriverid = this.Columns["driverid"];
                this.columnenable_pretrade = this.Columns["enable_pretrade"];
                this.columnoperid = this.Columns["operid"];
                this.columnopername_pretrade = this.Columns["opername_pretrade"];
                this.columnmembertype_pretrade = this.Columns["membertype_pretrade"];
            }
            
            private void InitClass() {
                this.columnid_pretrade = new DataColumn("id_pretrade", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid_pretrade);
                this.columnuserid = new DataColumn("userid", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuserid);
                this.columnusername_pretrade = new DataColumn("username_pretrade", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnusername_pretrade);
                this.columncarname_pretrade = new DataColumn("carname_pretrade", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncarname_pretrade);
                this.columncarid = new DataColumn("carid", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncarid);
                this.columncarmodel_pretrade = new DataColumn("carmodel_pretrade", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncarmodel_pretrade);
                this.columnbegintime_pretrade = new DataColumn("begintime_pretrade", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbegintime_pretrade);
                this.columnendtime_pretrade = new DataColumn("endtime_pretrade", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnendtime_pretrade);
                this.columndeposit_pretrade = new DataColumn("deposit_pretrade", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndeposit_pretrade);
                this.columnnote_pretrade = new DataColumn("note_pretrade", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnote_pretrade);
                this.columnrcdtime_pretrade = new DataColumn("rcdtime_pretrade", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrcdtime_pretrade);
                this.columndriver_pretrade = new DataColumn("driver_pretrade", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndriver_pretrade);
                this.columndriverid = new DataColumn("driverid", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndriverid);
                this.columnenable_pretrade = new DataColumn("enable_pretrade", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnenable_pretrade);
                this.columnoperid = new DataColumn("operid", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnoperid);
                this.columnopername_pretrade = new DataColumn("opername_pretrade", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnopername_pretrade);
                this.columnmembertype_pretrade = new DataColumn("membertype_pretrade", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmembertype_pretrade);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnid_pretrade}, true));
                this.columnid_pretrade.AllowDBNull = false;
                this.columnid_pretrade.Unique = true;
            }
            
            public pretradeRow NewpretradeRow() {
                return ((pretradeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new pretradeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(pretradeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pretradeRowChanged != null)) {
                    this.pretradeRowChanged(this, new pretradeRowChangeEvent(((pretradeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pretradeRowChanging != null)) {
                    this.pretradeRowChanging(this, new pretradeRowChangeEvent(((pretradeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pretradeRowDeleted != null)) {
                    this.pretradeRowDeleted(this, new pretradeRowChangeEvent(((pretradeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pretradeRowDeleting != null)) {
                    this.pretradeRowDeleting(this, new pretradeRowChangeEvent(((pretradeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovepretradeRow(pretradeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pretradeRow : DataRow {
            
            private pretradeDataTable tablepretrade;
            
            public pretradeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablepretrade = ((pretradeDataTable)(this.Table));
            }
            
            public int id_pretrade {
                get {
                    return ((int)(this[this.tablepretrade.id_pretradeColumn]));
                }
                set {
                    this[this.tablepretrade.id_pretradeColumn] = value;
                }
            }
            
            public string userid {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.useridColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.useridColumn] = value;
                }
            }
            
            public string username_pretrade {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.username_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.username_pretradeColumn] = value;
                }
            }
            
            public string carname_pretrade {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.carname_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.carname_pretradeColumn] = value;
                }
            }
            
            public string carid {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.caridColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.caridColumn] = value;
                }
            }
            
            public string carmodel_pretrade {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.carmodel_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.carmodel_pretradeColumn] = value;
                }
            }
            
            public System.DateTime begintime_pretrade {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablepretrade.begintime_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.begintime_pretradeColumn] = value;
                }
            }
            
            public System.DateTime endtime_pretrade {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablepretrade.endtime_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.endtime_pretradeColumn] = value;
                }
            }
            
            public System.Decimal deposit_pretrade {
                get {
                    try {
                        return ((System.Decimal)(this[this.tablepretrade.deposit_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.deposit_pretradeColumn] = value;
                }
            }
            
            public string note_pretrade {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.note_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.note_pretradeColumn] = value;
                }
            }
            
            public System.DateTime rcdtime_pretrade {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablepretrade.rcdtime_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.rcdtime_pretradeColumn] = value;
                }
            }
            
            public string driver_pretrade {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.driver_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.driver_pretradeColumn] = value;
                }
            }
            
            public string driverid {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.driveridColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.driveridColumn] = value;
                }
            }
            
            public System.Byte[] enable_pretrade {
                get {
                    try {
                        return ((System.Byte[])(this[this.tablepretrade.enable_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.enable_pretradeColumn] = value;
                }
            }
            
            public string operid {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.operidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.operidColumn] = value;
                }
            }
            
            public string opername_pretrade {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.opername_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.opername_pretradeColumn] = value;
                }
            }
            
            public string membertype_pretrade {
                get {
                    try {
                        return ((string)(this[this.tablepretrade.membertype_pretradeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepretrade.membertype_pretradeColumn] = value;
                }
            }
            
            public bool IsuseridNull() {
                return this.IsNull(this.tablepretrade.useridColumn);
            }
            
            public void SetuseridNull() {
                this[this.tablepretrade.useridColumn] = System.Convert.DBNull;
            }
            
            public bool Isusername_pretradeNull() {
                return this.IsNull(this.tablepretrade.username_pretradeColumn);
            }
            
            public void Setusername_pretradeNull() {
                this[this.tablepretrade.username_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool Iscarname_pretradeNull() {
                return this.IsNull(this.tablepretrade.carname_pretradeColumn);
            }
            
            public void Setcarname_pretradeNull() {
                this[this.tablepretrade.carname_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool IscaridNull() {
                return this.IsNull(this.tablepretrade.caridColumn);
            }
            
            public void SetcaridNull() {
                this[this.tablepretrade.caridColumn] = System.Convert.DBNull;
            }
            
            public bool Iscarmodel_pretradeNull() {
                return this.IsNull(this.tablepretrade.carmodel_pretradeColumn);
            }
            
            public void Setcarmodel_pretradeNull() {
                this[this.tablepretrade.carmodel_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool Isbegintime_pretradeNull() {
                return this.IsNull(this.tablepretrade.begintime_pretradeColumn);
            }
            
            public void Setbegintime_pretradeNull() {
                this[this.tablepretrade.begintime_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool Isendtime_pretradeNull() {
                return this.IsNull(this.tablepretrade.endtime_pretradeColumn);
            }
            
            public void Setendtime_pretradeNull() {
                this[this.tablepretrade.endtime_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool Isdeposit_pretradeNull() {
                return this.IsNull(this.tablepretrade.deposit_pretradeColumn);
            }
            
            public void Setdeposit_pretradeNull() {
                this[this.tablepretrade.deposit_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool Isnote_pretradeNull() {
                return this.IsNull(this.tablepretrade.note_pretradeColumn);
            }
            
            public void Setnote_pretradeNull() {
                this[this.tablepretrade.note_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool Isrcdtime_pretradeNull() {
                return this.IsNull(this.tablepretrade.rcdtime_pretradeColumn);
            }
            
            public void Setrcdtime_pretradeNull() {
                this[this.tablepretrade.rcdtime_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool Isdriver_pretradeNull() {
                return this.IsNull(this.tablepretrade.driver_pretradeColumn);
            }
            
            public void Setdriver_pretradeNull() {
                this[this.tablepretrade.driver_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool IsdriveridNull() {
                return this.IsNull(this.tablepretrade.driveridColumn);
            }
            
            public void SetdriveridNull() {
                this[this.tablepretrade.driveridColumn] = System.Convert.DBNull;
            }
            
            public bool Isenable_pretradeNull() {
                return this.IsNull(this.tablepretrade.enable_pretradeColumn);
            }
            
            public void Setenable_pretradeNull() {
                this[this.tablepretrade.enable_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool IsoperidNull() {
                return this.IsNull(this.tablepretrade.operidColumn);
            }
            
            public void SetoperidNull() {
                this[this.tablepretrade.operidColumn] = System.Convert.DBNull;
            }
            
            public bool Isopername_pretradeNull() {
                return this.IsNull(this.tablepretrade.opername_pretradeColumn);
            }
            
            public void Setopername_pretradeNull() {
                this[this.tablepretrade.opername_pretradeColumn] = System.Convert.DBNull;
            }
            
            public bool Ismembertype_pretradeNull() {
                return this.IsNull(this.tablepretrade.membertype_pretradeColumn);
            }
            
            public void Setmembertype_pretradeNull() {
                this[this.tablepretrade.membertype_pretradeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pretradeRowChangeEvent : EventArgs {
            
            private pretradeRow eventRow;
            
            private DataRowAction eventAction;
            
            public pretradeRowChangeEvent(pretradeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public pretradeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
